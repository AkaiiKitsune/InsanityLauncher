package insanity.Launcher;

import fr.theshark34.openauth.AuthenticationException;
import fr.theshark34.openauth.Authenticator;
import fr.theshark34.openauth.model.AuthAgent;
import fr.theshark34.openauth.model.response.AuthResponse;
import fr.theshark34.openlauncherlib.external.ExternalLaunchProfile;
import fr.theshark34.openlauncherlib.external.ExternalLauncher;
import fr.theshark34.openlauncherlib.minecraft.AuthInfos;
import fr.theshark34.openlauncherlib.minecraft.GameFolder;
import fr.theshark34.openlauncherlib.minecraft.GameInfos;
import fr.theshark34.openlauncherlib.minecraft.GameTweak;
import fr.theshark34.openlauncherlib.minecraft.GameType;
import fr.theshark34.openlauncherlib.minecraft.GameVersion;
import fr.theshark34.openlauncherlib.minecraft.MinecraftLauncher;
import fr.theshark34.openlauncherlib.util.CrashReporter;
import fr.theshark34.supdate.BarAPI;
import fr.theshark34.supdate.SUpdate;
import fr.theshark34.supdate.application.integrated.FileDeleter;
import fr.theshark34.swinger.Swinger;
import java.io.File;
import java.util.Arrays;

public class Launcher
{
  public static final GameVersion IF_VERSION = new GameVersion("1.12.2", GameType.V1_8_HIGHER);
  public static final GameInfos IF_INFOS = new GameInfos("Insanity", IF_VERSION, new GameTweak[] {/* GameTweak.FORGE */});
  public static final File IF_DIR = IF_INFOS.getGameDir();
  public static final File IF_CRASHES_DIR = new File(IF_DIR + "\\Launcher", "crashes");
  
  private static CrashReporter crashReporter = new CrashReporter("Insanity Launcher", IF_CRASHES_DIR);
  private static AuthInfos authInfos;
  private static Thread updateThread;
  
  public Launcher() {}
  
  public static void auth(String username, String password) throws AuthenticationException { Authenticator authentificator = new Authenticator("https://authserver.mojang.com/", fr.theshark34.openauth.AuthPoints.NORMAL_AUTH_POINTS);
    AuthResponse response = authentificator.authenticate(AuthAgent.MINECRAFT, username, password, "");
    authInfos = new AuthInfos(response.getSelectedProfile().getName(), response.getAccessToken(), response.getSelectedProfile().getId());
  }
  
  public static void update() throws Exception {
    SUpdate su = new SUpdate("http://s-update.officielity.fr/insanity/", IF_DIR);
    su.addApplication(new FileDeleter());
    
    updateThread = new Thread() {
      private int val;
      private int max;
      
      public void run() {
        while (!isInterrupted()) {
          if (BarAPI.getNumberOfFileToDownload() == 0) {
            LauncherFrame.getInstace().getLauncherPanel().setinfoText("Verification des fichiers");
          }
          else {
            val = ((int)(BarAPI.getNumberOfTotalDownloadedBytes() / 1000L));
            max = ((int)(BarAPI.getNumberOfTotalBytesToDownload() / 1000L));
            
            LauncherFrame.getInstace().getLauncherPanel().getProgressBar().setMaximum(max);
            LauncherFrame.getInstace().getLauncherPanel().getProgressBar().setValue(val);
            
            LauncherFrame.getInstace().getLauncherPanel().setinfoText("Downloading files : " + BarAPI.getNumberOfDownloadedFiles() + "/" + BarAPI.getNumberOfFileToDownload() + " " + Swinger.percentage(val, max) + " %");
          }
          
        }
      }
    };
    updateThread.start();
    su.start();
    
    updateThread.interrupt();
  }
  
  public static void launch()
    throws fr.theshark34.openlauncherlib.LaunchException
  {
    ExternalLaunchProfile profile = MinecraftLauncher.createExternalProfile(IF_INFOS, GameFolder.BASIC, authInfos);
    
    String[] ramArguments = LauncherFrame.getInstace().getLauncherPanel().getRamSelector().getRamArguments();
    profile.getVmArgs().addAll(Arrays.asList(ramArguments));
    
    
    ExternalLauncher launcher = new ExternalLauncher(profile);
    
    Process p = launcher.launch();
    
    try
    {
      Thread.sleep(5000L);
      LauncherFrame.getInstace().setVisible(false);
      p.waitFor();
    }
    catch (InterruptedException e)
    {
      e.printStackTrace();
    }
    
    System.exit(0);
  }
  
  public static void interruptThread() {
    updateThread.interrupt();
  }
  
  public static CrashReporter getCrashReporter() {
    return crashReporter;
  }
}
