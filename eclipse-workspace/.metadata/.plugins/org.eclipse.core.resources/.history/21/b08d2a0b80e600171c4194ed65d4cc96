package src.insanity.Launcher;

import static fr.theshark34.swinger.Swinger.*;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.io.File;

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JTextField;
import javax.swing.SwingConstants;

import fr.theshark34.openauth.AuthenticationException;
import fr.theshark34.openlauncherlib.LaunchException;
import fr.theshark34.openlauncherlib.util.Saver;
import fr.theshark34.openlauncherlib.util.ramselector.RamSelector;
import fr.theshark34.swinger.animation.Animator;
import fr.theshark34.swinger.colored.SColoredBar;
import fr.theshark34.swinger.colored.SColoredButton;
import fr.theshark34.swinger.event.SwingerEvent;
import fr.theshark34.swinger.event.SwingerEventListener;
import fr.theshark34.swinger.textured.STexturedButton;

@SuppressWarnings("serial")
public class LauncherPanel extends JPanel implements SwingerEventListener {
	
	private Image background = getResource("background.png");
	
	private Saver saver = new Saver(new File(Launcher.IF_DIR, "launcher.properties"));

	
	private JTextField usernameField = new JTextField(saver.get("username"));
	//private JPasswordField passwordField = new JPasswordField();
	private JPasswordField passwordField = new JPasswordField(saver.get("passwordDEBUG")); //DEBUG PURPOSE
	
	private STexturedButton playButton = new STexturedButton(getResource("play.png"));
	private STexturedButton exitButton = new STexturedButton(getResource("exit.png"));
	private STexturedButton reduceButton = new STexturedButton(getResource("reduce.png"));
	
	private SColoredButton ramButton = new SColoredButton(getTransparentWhite(100), getTransparentWhite(175));
	
	private SColoredBar progressBar = new SColoredBar(getTransparentWhite(100), getTransparentWhite(175)); 
	private JLabel infoLabel = new JLabel("Clique sur jouer !", SwingConstants.CENTER);
	
	public RamSelector ramSelector = new RamSelector(new File(Launcher.IF_DIR, "ram.txt"));
	
	public LauncherPanel() {
		this.setLayout(null);
		
		//Fields 
		//Username
		usernameField.setForeground(Color.WHITE);
		usernameField.setFont(usernameField.getFont().deriveFont(20F));
		usernameField.setCaretColor(Color.WHITE);
		usernameField.setOpaque(false);
		usernameField.setBorder(null);
		usernameField.setBounds(330, 192, 316, 37);
		this.add(usernameField);
		//Password
		passwordField.setForeground(Color.WHITE);
		passwordField.setFont(passwordField.getFont().deriveFont(20F));
		passwordField.setCaretColor(Color.WHITE);
		passwordField.setOpaque(false);
		passwordField.setBorder(null);
		passwordField.setBounds(330, 273, 316, 37);
		this.add(passwordField);
		
		////////////////////////////////////////////////////////////////
		
		//exit and reduce
		exitButton.addEventListener(this);
		exitButton.setBounds(923, 0, 48, 18);
		this.add(exitButton);
		
		reduceButton.addEventListener(this);
		reduceButton.setBounds(895, 0, 27, 18);
		this.add(reduceButton);
		
		
		//Button play
		playButton.addEventListener(this);
		playButton.setBounds(360, 343, 253, 64);
		this.add(playButton);
		
		//Loading bar
		infoLabel.setBounds(3, 572, 969, 22);
		infoLabel.setForeground(Color.WHITE);
		infoLabel.setFont(usernameField.getFont());
		this.add(infoLabel);
		
		progressBar.setBounds(3, 600, 969, 22);
		this.add(progressBar);
		
		//RAM
		this.ramButton.addEventListener(this);
		this.ramButton.setBounds(867, 0, 27, 18);
		this.add(ramButton);
		 
	}
	
	@Override
	@SuppressWarnings("deprecation")
	public void onEvent(SwingerEvent e) {
		if(e.getSource() == exitButton)  // QUITTER LE LAUNCHER
		{
			Animator.fadeOutFrame(LauncherFrame.getInstace(), 2, new Runnable() {

				@Override
				public void run() {
					// TODO Auto-generated method stub
					System.exit(0);
				}
			});
		}
		if(e.getSource() == reduceButton) LauncherFrame.getInstace().setState(JFrame.ICONIFIED); 
		if(e.getSource() == ramButton ) // RAM SELECTOR
		{
			ramSelector.display();
		}
		if(e.getSource() == playButton) {
			setFieldEnabled(false);
			if (usernameField.getText().replaceAll(" ", "").length() == 0 || passwordField.getText().length() == 0) {
				JOptionPane.showMessageDialog(this, "Erreur, veuillez entrer un pseudo et un mot de passe valide.", "Erreur identifiants", JOptionPane.ERROR_MESSAGE);
				setFieldEnabled(true);
				return;
			}
			
			Thread t = new Thread() {
				
				@Override
				public void run() {
					try {
						Launcher.auth(usernameField.getText(), passwordField.getText());
					} catch (AuthenticationException e) {
						JOptionPane.showMessageDialog(LauncherPanel.this, "Erreur, impossible de se connecter : " +e.getErrorModel().getErrorMessage(), "Erreur Connection", JOptionPane.ERROR_MESSAGE);
						setFieldEnabled(true);
						return;
					}
					//Connection successful
					saver.set("username", usernameField.getText());
					saver.set("passwordDEBUG", passwordField.getText());
					saver.set("passwordDEBUG", passwordField.getText());
					
					try {
						Launcher.update();
					} catch (Exception e) {
						Launcher.interruptThread();
						Launcher.getCrashReporter().catchError(e, "Impossible de mettre a jour Insanity !");
						setFieldEnabled(true);
						return;
					}
					
					try {
						Launcher.launch();
					} catch (LaunchException e) {
						Launcher.getCrashReporter().catchError(e, "Impossible de lancer Insanity !");
						setFieldEnabled(true);
						return;
					}
				}
			};
			t.start();
			
		}
	}
	
	@Override 
	public void paintComponent(Graphics graphics) {
		super.paintComponent(graphics);
		drawFullsizedImage(graphics, this, background);
		
	}
	
	private void setFieldEnabled(boolean enabled) {
		usernameField.setEnabled(enabled);
		passwordField.setEnabled(enabled);
		playButton.setEnabled(enabled);
		ramButton.setEnabled(enabled);
	}

	public SColoredBar getProgressBar() {
		return progressBar;
	}

	public void setinfoText(String text) {
		infoLabel.setText(text);
	}
	
	public RamSelector getRamSelector(){
		return ramSelector;
	}
}
