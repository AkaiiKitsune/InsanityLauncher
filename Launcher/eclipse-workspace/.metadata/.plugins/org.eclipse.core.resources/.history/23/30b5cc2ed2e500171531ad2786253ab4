package insanity.Launcher;

import java.io.File;
import java.util.Arrays;

import fr.theshark34.openauth.AuthPoints;
import fr.theshark34.openauth.AuthenticationException;
import fr.theshark34.openauth.Authenticator;
import fr.theshark34.openauth.model.AuthAgent;
import fr.theshark34.openauth.model.response.AuthResponse;
import fr.theshark34.openlauncherlib.LaunchException;
import fr.theshark34.openlauncherlib.external.ExternalLaunchProfile;
import fr.theshark34.openlauncherlib.external.ExternalLauncher;
import fr.theshark34.openlauncherlib.minecraft.AuthInfos;
import fr.theshark34.openlauncherlib.minecraft.GameFolder;
import fr.theshark34.openlauncherlib.minecraft.GameInfos;
import fr.theshark34.openlauncherlib.minecraft.GameTweak;
import fr.theshark34.openlauncherlib.minecraft.GameType;
import fr.theshark34.openlauncherlib.minecraft.GameVersion;
import fr.theshark34.openlauncherlib.minecraft.MinecraftLauncher;
import fr.theshark34.openlauncherlib.util.CrashReporter;
import fr.theshark34.openlauncherlib.util.ProcessLogManager;
import fr.theshark34.supdate.BarAPI;
import fr.theshark34.supdate.SUpdate;
import fr.theshark34.supdate.application.integrated.FileDeleter;
import fr.theshark34.swinger.Swinger;


public class Launcher {
	public static final GameVersion IF_VERSION = new GameVersion("1.7.10", GameType.V1_7_10);
	public static final GameInfos IF_INFOS = new GameInfos("Insanity", IF_VERSION, new GameTweak[] {GameTweak.FORGE});
	public static final File IF_DIR  = IF_INFOS.getGameDir();
	public static final File IF_CRASHES_DIR = new File(IF_DIR, "crashes");
	
	private static CrashReporter crashReporter = new CrashReporter("Insanity Launcher", IF_CRASHES_DIR);
	
	private static AuthInfos authInfos;
	private static Thread updateThread;
	
	public static void auth(String username, String password) throws AuthenticationException {
		Authenticator authentificator = new Authenticator(Authenticator.MOJANG_AUTH_URL, AuthPoints.NORMAL_AUTH_POINTS);
		AuthResponse response = authentificator.authenticate(AuthAgent.MINECRAFT, username, password, "");
		authInfos = new AuthInfos(response.getSelectedProfile().getName(), response.getAccessToken(), response.getSelectedProfile().getId());
	}
	
	public static void update() throws Exception {
		SUpdate su = new SUpdate("http://s-update.officielity.fr/", IF_DIR);
		su.addApplication(new FileDeleter());
		
		 updateThread = new Thread() {
			private int val, max;
			
			@Override
			public void run() {
				while (!this.isInterrupted()) {
					if(BarAPI.getNumberOfFileToDownload() == 0) {
						LauncherFrame.getInstace().getLauncherpanel().setinfoText("Verification des fichiers"); 
						continue;
					}
					val = (int) (BarAPI.getNumberOfTotalDownloadedBytes() / 1000);
					max = (int) (BarAPI.getNumberOfTotalBytesToDownload() / 1000);
					
					LauncherFrame.getInstace().getLauncherpanel().getProgressBar().setMaximum(max);
					LauncherFrame.getInstace().getLauncherpanel().getProgressBar().setValue(val);
					
					LauncherFrame.getInstace().getLauncherpanel().setinfoText("Downloading files : " + BarAPI.getNumberOfDownloadedFiles() + "/" + BarAPI.getNumberOfFileToDownload() + " " + Swinger.percentage(val, max) + " %" );
					
				}
				
			}
		};
		updateThread.start();
		su.start();
		
		updateThread.interrupt();
		
	}
	
	public static void launch() throws LaunchException 
	{
		ExternalLaunchProfile profile = MinecraftLauncher.createExternalProfile(IF_INFOS, GameFolder.BASIC, authInfos);
		profile.getVmArgs().addAll(Arrays.asList(LauncherFrame.getInstace().getLauncherpanel().getRamSelector().getRamArguments()));
		ExternalLauncher launcher = new ExternalLauncher(profile);
		
		
		LauncherFrame.getInstace().setVisible(false);
		
		Process p = launcher.launch();
		
		ProcessLogManager manager = new ProcessLogManager(p.getInputStream(), new File(IF_DIR, "InsanityLogs.txt"));
		manager.start();
		
		try
		{
			Thread.sleep(5000L);
			LauncherFrame.getInstace().setVisible(false);
			p.waitFor();
		} 
		catch (InterruptedException e) 
		{
			e.printStackTrace();
		}
		
		System.exit(0);
	}
	
	public static void interruptThread() {
		updateThread.interrupt();
	}
	
	public static CrashReporter getCrashReporter() {
		return crashReporter;
	}
	
} 
